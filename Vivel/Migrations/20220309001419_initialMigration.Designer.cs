// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Vivel.Database;

namespace Vivel.Migrations
{
    [DbContext(typeof(VivelContext))]
    [Migration("20220309001419_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Vivel.Database.Badge", b =>
                {
                    b.Property<string>("BadgeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("BadgeID")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PresetBadgeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("UserID")
                        .IsFixedLength(true);

                    b.HasKey("BadgeId");

                    b.HasIndex("PresetBadgeId");

                    b.HasIndex("UserId");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("Vivel.Database.Donation", b =>
                {
                    b.Property<string>("DonationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("DonationID")
                        .IsFixedLength(true);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DriveId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("DriveID")
                        .IsFixedLength(true);

                    b.Property<int?>("ErythrocyteCount")
                        .HasColumnType("int");

                    b.Property<int?>("LeukocyteCount")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlateletCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("UserID")
                        .IsFixedLength(true);

                    b.HasKey("DonationId");

                    b.HasIndex("DriveId");

                    b.HasIndex("UserId");

                    b.ToTable("Donation");
                });

            modelBuilder.Entity("Vivel.Database.Drive", b =>
                {
                    b.Property<string>("DriveId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("DriveID")
                        .IsFixedLength(true);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("HospitalId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("HospitalID")
                        .IsFixedLength(true);

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Urgency")
                        .HasColumnType("bit");

                    b.HasKey("DriveId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Drive");
                });

            modelBuilder.Entity("Vivel.Database.Faq", b =>
                {
                    b.Property<string>("Faqid")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("FAQID")
                        .IsFixedLength(true);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Answered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Faqid");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("Vivel.Database.Hospital", b =>
                {
                    b.Property<string>("HospitalId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("HospitalID")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("HospitalId");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("Vivel.Database.Notification", b =>
                {
                    b.Property<string>("NotificationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("NotificationID")
                        .IsFixedLength(true);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("LinkId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("LinkID")
                        .IsFixedLength(true);

                    b.Property<string>("LinkType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("UserID")
                        .IsFixedLength(true);

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Vivel.Database.PresetBadge", b =>
                {
                    b.Property<string>("PresetBadgeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("PresetBadgeId");

                    b.ToTable("PresetBadge");
                });

            modelBuilder.Entity("Vivel.Database.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .HasColumnName("UserID")
                        .IsFixedLength(true);

                    b.Property<string>("BloodType")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Vivel.Database.Badge", b =>
                {
                    b.HasOne("Vivel.Database.PresetBadge", "PresetBadge")
                        .WithMany("Badges")
                        .HasForeignKey("PresetBadgeId")
                        .HasConstraintName("FK__Badge__PresetBad__30C33EC3");

                    b.HasOne("Vivel.Database.User", "User")
                        .WithMany("Badges")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Badge__UserID__2FCF1A8A");

                    b.Navigation("PresetBadge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vivel.Database.Donation", b =>
                {
                    b.HasOne("Vivel.Database.Drive", "Drive")
                        .WithMany("Donations")
                        .HasForeignKey("DriveId")
                        .HasConstraintName("FK__Donation__DriveI__37703C52");

                    b.HasOne("Vivel.Database.User", "User")
                        .WithMany("Donations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Donation__UserID__367C1819");

                    b.Navigation("Drive");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vivel.Database.Drive", b =>
                {
                    b.HasOne("Vivel.Database.Hospital", "Hospital")
                        .WithMany("Drives")
                        .HasForeignKey("HospitalId")
                        .HasConstraintName("FK__Drive__HospitalI__339FAB6E");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Vivel.Database.Notification", b =>
                {
                    b.HasOne("Vivel.Database.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Notificat__UserI__3A4CA8FD");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vivel.Database.Drive", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("Vivel.Database.Hospital", b =>
                {
                    b.Navigation("Drives");
                });

            modelBuilder.Entity("Vivel.Database.PresetBadge", b =>
                {
                    b.Navigation("Badges");
                });

            modelBuilder.Entity("Vivel.Database.User", b =>
                {
                    b.Navigation("Badges");

                    b.Navigation("Donations");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
